#!/bin/bash

usage() {
  cat <<-EOF
  usage: ${0} -d /path/to/git/repository [-a] [-c] [-r] [-u]

    -h            this help screen
    -d path       install the hooks to the specified path
    -a            deploy pre-commit and pre-receive hooks
    -c            deploy only the pre-commit hook
    -r            deploy only the pre-receive hook
    -u            deploy only the post-update hook
    -g            enable to install in Git Lab repo custom_hooks
    -l            enable to install in Gitolite 3.6+ repo-specific hooks
    -b            enable to install in Stash/BitBucket Server [pre/post]-receive.d

  returns status code of 0 for success, otherwise, failure

  examples:

  1) to install pre-commit and pre-receive the hooks to foo git repo:

    ${0} -d /path/to/foo -a

  2) to install only the pre-commit hook to bar git repo:

    ${0} -d /path/to/bar -c

  3) to install only the pre-commit and pre-receive hook to foobar git repo:

    ${0} -d /path/to/foobar -c -r

EOF
}

while getopts ":d:abcghlru" opt; do
  case $opt in
    a)
      INST_COMMIT=1
      INST_RECEIVE=1
      ;;
    b)
      BITBUCKET_REPO=1
      ;;
    c)
      INST_COMMIT=1
      ;;
    d)
      GIT_REPO="$OPTARG"
      ;;
    g)
      GITLAB_REPO=1
      ;;
    h)
      usage
      exit -1
      ;;
    l)
      GITOLITE_REPO=1
      ;;
    r)
      INST_RECEIVE=1
      ;;
    u)
      INST_UPDATE=1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      ;;
  esac
done

# We need at least one hook to deploy
if [[ -z "${INST_COMMIT}" \
  && -z "${INST_RECEIVE}" \
  && -z "${INST_UPDATE}" ]]; then
  echo "Error: You must specify at least one hook to deploy" >&2
  usage
  exit -2
fi

# We need to have a git repository specified
if [ -z "${GIT_REPO}" ]; then
  echo "Error: No repository specified" >&2
  usage
  exit -3
fi

# Validate the provided repository is a gitolite repository
if [ "${GITOLITE_REPO}" = "1" ]; then
  if [ ! -f "${GIT_REPO}/conf/gitolite.conf" ]; then
    echo "Error: Not a gitolite admin repository" >&2
    exit -7
  fi
fi

# Check if the repo specified is a submodule
if [ -f "${GIT_REPO}/.git" ]; then
  SUBMODULE_REPO=$(cat "${GIT_REPO}/.git" | grep 'gitdir' | awk '{print $2}')
  GIT_REPO="$(cd "${GIT_REPO}" ; cd "${SUBMODULE_REPO}" ; pwd)"
elif [ "${BITBUCKET_REPO}" = "1" ]; then
  GIT_REPO="${GIT_REPO}"
elif [ -f "${GIT_REPO}/hooks" ]; then
  # This is for bare repos
  GIT_REPO="${GIT_REPO}"
else
  GIT_REPO="${GIT_REPO}/.git"
fi

GIT_REPO=$(cd "${GIT_REPO}" ; pwd)

# Make sure the repo specified is valid, submodule or normal
if [[ -n "${SUBMODULE_REPO}" && ! -d "${GIT_REPO}" ]]; then
  echo "Error: Submodule not a valid repository" >&2
  exit -3
elif [[ -z "${SUBMODULE_REPO}" && ! -d "${GIT_REPO}" ]]; then
  echo "Error: Not a valid repository" >&2
  exit -3
fi

# Cleanup the hooks directory so it works properly
HOOKS_DIR=$(dirname "${0}")
HOOKS_DIR=$(cd "${HOOKS_DIR}" ; pwd)

# Check if it's Git Lab, needs to go into custom_hooks
if [ "${GITLAB_REPO}" = "1" ]; then
  REAL_HOOKS_DIR="custom_hooks"
# Check if it's Gitolite, needs repo-specific hook directory
elif [ "${GITOLITE_REPO}" = "1" ]; then
  REAL_HOOKS_DIR="../local/hooks/repo-specific"
else
  REAL_HOOKS_DIR="hooks"
fi

# Make sure the hooks directory exists -- mainly for Git Lab and Gitolite
if [ ! -d "${GIT_REPO}/${REAL_HOOKS_DIR}" ]; then
  mkdir -p "${GIT_REPO}/${REAL_HOOKS_DIR}"
fi

# Install the hooks!
if [ "${GITOLITE_REPO}" = "1" ]; then
  if [ "${INST_COMMIT}" = "1" ]; then
    echo "Error: pre-commit hooks outside of Gitolite's scope, use non-gitolite arguments to local repo" >&2
    exit -8
  fi

  # Do real copies instead of symlinks in order to not require submodules
  # Change naming on files to be more descriptive for gitolite configuration and prevent possible naming collision
  if [ "${INST_RECEIVE}" = "1" ]; then
    cp -f "${HOOKS_DIR}/pre-receive" "${GIT_REPO}/${REAL_HOOKS_DIR}/puppet-git-hooks.pre-receive" \
    && cp -rf "${HOOKS_DIR}/commit_hooks" "${GIT_REPO}/${REAL_HOOKS_DIR}/" \
    && echo "pre-receive hook deployed successfully" \
    || ( echo "pre-receive hook failed to deploy to gitolite repo" >&2 ; exit -9 )
  fi

  if [ "${INST_UPDATE}" = "1" ]; then
    cp -f "${HOOKS_DIR}/post-update" "${GIT_REPO}/${REAL_HOOKS_DIR}/puppet-git-hooks.post-update" \
    && echo "post-update hook deployed successfully" \
    || ( echo "post-update hook failed to deploy to gitolite repo" >&2 ; exit -10 )
  fi
else
  if [ "${INST_COMMIT}" = "1" ]; then
    ln -sf "${HOOKS_DIR}/pre-commit" "${GIT_REPO}/${REAL_HOOKS_DIR}/pre-commit" \
    && echo "pre-commit hook deployed successfully" \
    || ( echo "pre-commit hook failed to deploy" >&2 ; exit -4 )
  fi

  if [ "${INST_RECEIVE}" = "1" ]; then
    if [ "${BITBUCKET_REPO}" = "1" ]; then
      # Use pre-receive.d directory and 'full' name for BitBucket
      ln -sf "${HOOKS_DIR}/pre-receive" "${GIT_REPO}/${REAL_HOOKS_DIR}/pre-receive.d/puppet-git-hooks-pre-receive" \
      && echo "pre-receive hook deployed successfully" \
      || ( echo "pre-receive hook failed to deploy" >&2 ; exit -5 )
    else
      ln -sf "${HOOKS_DIR}/pre-receive" "${GIT_REPO}/${REAL_HOOKS_DIR}/pre-receive" \
      && echo "pre-receive hook deployed successfully" \
      || ( echo "pre-receive hook failed to deploy" >&2 ; exit -5 )
    fi
  fi

  if [ "${INST_UPDATE}" = "1" ]; then
    ln -sf "${HOOKS_DIR}/post-update" "${GIT_REPO}/${REAL_HOOKS_DIR}/post-update" \
    && echo "post-update hook deployed successfully" \
    || ( echo "post-update hook failed to deploy" >&2 ; exit -6 )
  fi
fi
